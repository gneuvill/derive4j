
buildscript {
    wrapper {
        gradleVersion = "7.3.3"
        distributionType = Wrapper.DistributionType.ALL
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.27.0"
    id "com.github.ben-manes.versions" version "0.42.0" apply false
    id "com.github.hierynomus.license" version "0.16.1" apply false
    id "com.diffplug.spotless" version "6.2.1" apply false
}

defaultTasks 'build'

ext {}

allprojects {

    apply plugin: "com.jfrog.artifactory"
    apply plugin: "jacoco"
    apply plugin: "idea"
    
    defaultTasks "build"

    ext {
        isSnapshot = true
        d4jBaseVersion = "1.2.0"

        snapshotAppendix = "-SNAPSHOT"
        d4jVersion = d4jBaseVersion + (isSnapshot ? snapshotAppendix : "")

        projectTitle = "Derive4J"
        projectName = "derive4j"
        pomProjectName = projectTitle
        pomOrganisation = "Derive4J contributors"
        projectDescription = "Annotation processor and framework for deriving algebraic data types constructors, morphisms, optics and typeclasses"
        projectUrl = "https://github.com/derive4j/derive4j"
        scmUrl = "git://github.com/derive4j/derive4j.git"
        scmGitFile = "scm:git@github.com:derive4j/derive4j.git"

        primaryEmail = "jb@giraudeau.info"

        dependencyJavaPoet = "com.squareup:javapoet:1.11.1"
        dependencyPreviousDerive4J = "org.derive4j:derive4j:1.1.0"
        dependencyJunit = "junit:junit:4.12"
        dependencyAutoService = "com.google.auto.service:auto-service:1.0-rc5"

        gplLicenseName = "The GNU General Public License"
        lgplLicenseName = "The GNU Lesser General Public License"
        bsd3LicenseName = "The BSD3 License"

        displayCompilerWarnings = true
    }

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    version = d4jVersion
    group = "org.derive4j"

}

artifactoryPublish.skip = true

subprojects {

    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "com.github.ben-manes.versions"
    apply plugin: "com.github.hierynomus.license"
    apply plugin: "com.diffplug.spotless"

    spotless {
        java {
            eclipse("4.7.2").configFile "$rootDir/etc/eclipse-format.xml"
            indentWithSpaces(2)
            trimTrailingWhitespace()
            removeUnusedImports()
            endWithNewline()
        }
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    if (displayCompilerWarnings) {
        tasks.withType(JavaCompile) {
            options.compilerArgs += ["-Xlint:all"]
        }
    }

    license {
        header file('etc/HEADER.txt')
        strictCheck true
        ignoreFailures true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    String licenseName =
        project.name == "processor" ? gplLicenseName : project.name == "examples" ? bsd3LicenseName : lgplLicenseName 
    
    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                pom {
                    name = pomProjectName
                    description = projectDescription
                    url = projectUrl
                    organization {
                        name = pomOrganisation
                        url = projectUrl
                    }
                    scm {
                        url = scmUrl
                    }
                    licenses {
                        license {
                            name = licenseName
                            url = "https://github.com/derive4j/derive4j/blob/master/${project.name}/LICENSE.txt"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            name = "Jean-Baptiste Giraudeau"
                            email = primaryEmail
                        }
                    }
                }
            }
        }
    }
}

configure(subprojects) {

    sourceCompatibility = "17"

    task javadocJar(type: Jar, dependsOn: "javadoc") {
        archiveClassifier = 'javadoc'
        from "build/docs/javadoc"
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier = 'sources'
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    jar {
        archiveVersion = project.d4jVersion
    }

    artifactoryPublish {
        dependsOn sourcesJar, javadocJar
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")


    classDirectories.setFrom(files(subprojects.findAll {subproject -> subproject.name != "examples"} .sourceSets.main.output))
    sourceDirectories.setFrom(files(subprojects.findAll {subproject -> subproject.name != "examples"} .sourceSets.main.allSource.srcDirs))

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            // The Artifactory repository key to publish to :
            if (isSnapshot) {
                repoKey = 'oss-snapshot-local'
            } else {
                repoKey = 'oss-release-local'
            }
            username = jfrogUsername         //The publisher user name
            password = jfrogPassword      //The publisher password
        }
        defaults {
            publishConfigs('archives')
            publishIvy = false
        }
    }
    resolve {
        repository {
            repoKey = 'libs-releases'  //The Artifactory (preferably virtual) repository key to resolve from
        }
    }
}

task env doLast {
    println System.getenv()
}
